generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                        String         @id @default(cuid())
  email                                     String         @unique
  username                                  String         @unique
  clerkId                                   String         @unique
  name                                      String?
  bio                                       String?
  image                                     String?
  location                                  String?
  researchInterest                          String?
  website                                   String?
  createdAt                                 DateTime       @default(now())
  updatedAt                                 DateTime       @updatedAt
  comments                                  Comment[]
  following                                 Follows[]      @relation("follower")
  followers                                 Follows[]      @relation("following")
  likes                                     Like[]
  Notification_Notification_creatorIdToUser Notification[] @relation("Notification_creatorIdToUser")
  Notification_Notification_userIdToUser    Notification[] @relation("Notification_userIdToUser")
  posts                                     Post[]
  chiUpdates                                ChiUpdate[]
}

model Post {
  id           String         @id @default(cuid())
  authorId     String
  content      String?
  image        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  comments     Comment[]
  likes        Like[]
  Notification Notification[]
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id           String         @id @default(cuid())
  content      String
  authorId     String
  postId       String
  createdAt    DateTime       @default(now())
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id                                String           @id
  userId                            String
  creatorId                         String
  type                              NotificationType
  read                              Boolean          @default(false)
  postId                            String?
  commentId                         String?
  createdAt                         DateTime         @default(now())
  Comment                           Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User_Notification_creatorIdToUser User             @relation("Notification_creatorIdToUser", fields: [creatorId], references: [id], onDelete: Cascade)
  Post                              Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  User_Notification_userIdToUser    User             @relation("Notification_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model ChiUpdate {
  id        String   @id @default(cuid())
  title     String
  date      DateTime @default(now())
  link      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}
